FULL IMPLEMENTATION OF "PULSE" GAUGE
‚úÖ OBJECTIVE
Replace the existing "Pulse" gauge in the FSN dashboard with a circular segmented meter based on the provided image:

Displays a central number: the user's pulse strength (e.g. 42)

Label below: Hz

12 glowing segments around a circular perimeter

Segments increase based on a dynamic value from pulseStrength (0‚Äì100)

Styled in neon cyan Tron-like aesthetic

üß± 1. FILE STRUCTURE
Place the code inside:

bash
Copy
Edit
/src/components/PulseMeter.jsx
/src/styles/PulseMeter.css
üß© 2. REACT COMPONENT ‚Äì PulseMeter.jsx
jsx
Copy
Edit
import React from 'react';
import './PulseMeter.css';

const TOTAL_SEGMENTS = 12;

const PulseMeter = ({ pulseStrength = 0 }) => {
  // Calculate how many segments should be active
  const activeSegments = Math.round((pulseStrength / 100) * TOTAL_SEGMENTS);

  return (
    <div className="pulse-container">
      <svg className="pulse-gauge" viewBox="0 0 200 200">
        {[...Array(TOTAL_SEGMENTS)].map((_, i) => {
          const angle = (360 / TOTAL_SEGMENTS) * i - 90;
          const radius = 90;
          const x = 100 + radius * Math.cos((angle * Math.PI) / 180);
          const y = 100 + radius * Math.sin((angle * Math.PI) / 180);
          const isActive = i < activeSegments;

          return (
            <circle
              key={i}
              cx={x}
              cy={y}
              r="6"
              className={`pulse-segment ${isActive ? 'active' : ''}`}
            />
          );
        })}
      </svg>

      <div className="pulse-readout">
        <div className="pulse-value">{pulseStrength}</div>
        <div className="pulse-unit">Hz</div>
      </div>

      <div className="pulse-label">PULSE</div>
    </div>
  );
};

export default PulseMeter;
üé® 3. CSS STYLING ‚Äì PulseMeter.css
css
Copy
Edit
.pulse-container {
  position: relative;
  width: 200px;
  height: 220px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  color: #00f0ff;
  font-family: 'Orbitron', sans-serif;
}

.pulse-gauge {
  width: 200px;
  height: 200px;
  position: absolute;
  top: 0;
  left: 0;
}

.pulse-segment {
  fill: rgba(0, 255, 255, 0.08);
  transition: fill 0.3s ease-in-out;
}

.pulse-segment.active {
  fill: #00f0ff;
  filter: drop-shadow(0 0 6px #00f0ff);
}

.pulse-readout {
  position: relative;
  z-index: 2;
  text-align: center;
  margin-top: 20px;
}

.pulse-value {
  font-size: 3rem;
  font-weight: 700;
  text-shadow: 0 0 6px #00f0ff;
}

.pulse-unit {
  font-size: 1.2rem;
  text-shadow: 0 0 4px #00f0ff;
  opacity: 0.85;
}

.pulse-label {
  margin-top: 180px;
  font-size: 1.3rem;
  font-weight: 600;
  text-shadow: 0 0 5px #00f0ff;
  letter-spacing: 2px;
}
‚öôÔ∏è 4. INTEGRATION IN DASHBOARD
Replace your old Pulse component in the dashboard with:

jsx
Copy
Edit
import PulseMeter from './components/PulseMeter';

...

<PulseMeter pulseStrength={userData.pulseStrength} />
If you don't yet have userData.pulseStrength, simulate with a constant like pulseStrength={42} for now.

üåê 5. CDN / FONT SETUP (if needed)
Include in your HTML or index.html (if not already in global styles):

html
Copy
Edit
<link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&display=swap" rel="stylesheet">
‚úÖ RESULT
You‚Äôll get a glowing, animated Tron-style circular gauge like the image you provided:

12 segments light up from left to right

Center reads: 42 Hz (dynamically updates)

Label: PULSE in glowing cyan below

