 Set Up Database and Storage Architecture
Goal: Set up a secure, scalable backend with the schema, routes, and logic needed to support .fsn name claims, XP tracking, login streaks, vault uploads, referrals, and AI chat history.

ðŸ‘‡ COPY/PASTE INSTRUCTIONS FOR REPLIT AI
plaintext
Copy
Edit
You're helping me build the backend for FSN Phase 0.

Use either Supabase (preferred for scaling) or Replit DB (OK for lightweight MVP). Create the following 5 data tables/collections:

1. `users`
- `id` (autogenerated UUID or primary key)
- `email` (optional, lowercase, validated)
- `fsn_name` (foreign key from `fsn_names.name`)
- `created_at` (timestamp)
- `last_login` (timestamp)
- `streak_days` (integer, default 0)
- `xp` (integer, default 0)
- `wallet_linked` (optional, wallet address string)
- `badges` (JSON array or object)

2. `fsn_names`
- `name` (primary key, string, lowercase, unique)
- `claimed_by` (user ID reference)
- `created_at` (timestamp)

3. `vault_uploads`
- `id` (autogenerated ID)
- `user_id` (foreign key to users.id)
- `upload_type` (enum: 'file' or 'nft')
- `ipfs_hash` (string)
- `filename` (string)
- `timestamp` (timestamp)

4. `referrals`
- `referrer_id` (foreign key to users.id)
- `referred_user_id` (foreign key to users.id)
- `rewarded` (boolean, default false)

5. `ai_chat_history`
- `user_id` (foreign key)
- `message` (text)
- `response` (text)
- `timestamp` (timestamp)

---

Create the following backend API endpoints:

- `POST /claim-name`
  - Input: proposed `.fsn` name and optional email
  - Validate name rules (see below)
  - If valid and available, assign to user and store in `fsn_names`
  - Create `users` entry with assigned name

- `GET /check-name/:fsn_name`
  - Returns whether the name is available (true/false)

- `POST /login`
  - Input: user ID
  - Updates `last_login`
  - Increments `streak_days` if last login was yesterday
  - Resets streak if last login was more than 48h ago

- `POST /upload`
  - Input: user ID, upload_type (file/nft), IPFS hash, filename
  - Stores entry in `vault_uploads`

- `GET /profile/:user_id`
  - Returns XP, streak, .fsn name, badges, upload count

- `POST /referral`
  - Input: referrer ID, new user ID
  - Adds to `referrals`, sets `rewarded: false`

- `GET /leaderboard`
  - Returns top users by XP (limit 100)

---

âœ… Apply the following validation rules for `.fsn` names:

- Lowercase only (aâ€“z, 0â€“9, one dash max, no underscores or spaces)
- Length between 4 and 25 characters
- Only allow one `.fsn` name per user
- Reject any of these characters: `<`, `>`, `{`, `}`, `\`, `/`, `:`, `;`, `'`, `"`, `$`, `%`, `^`, `&`, `*`, `!`
- Block reserved names: `admin`, `support`, `fsn`, `coinbase`, `pulse`, `vault`, `root`, `system`, etc.
- Sanitize and normalize input before saving
- Normalize and enforce lowercase at entry

---

ðŸ’¡ Security and anti-bot protection:

- Add basic IP throttling for endpoints `/claim-name` and `/login` (e.g. max 10 requests/hour per IP)
- Optional: Use CAPTCHA or email verification after 1st failed attempt
- Optional: Token bucket or rate limit logic for abuse prevention
- One `.fsn` name per IP every 24h if email is not verified

---

ðŸŽ¯ Notes:

- Build with modularity â€” database models and endpoints should be in separate folders/modules
- Store all timestamps in UTC
- Prepare for eventual expansion with wallet signature verification, user session logic, or token incentives (not needed now)

---